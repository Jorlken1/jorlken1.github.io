<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://jorlken1.github.io</id>
    <title>jorlken Notes</title>
    <updated>2022-05-13T06:03:32.370Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://jorlken1.github.io"/>
    <link rel="self" href="https://jorlken1.github.io/atom.xml"/>
    <subtitle>勤学如春起之苗，不见其长，日有精进</subtitle>
    <logo>https://jorlken1.github.io/images/avatar.png</logo>
    <icon>https://jorlken1.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, jorlken Notes</rights>
    <entry>
        <title type="html"><![CDATA[基于Vue的视频播放器（支持视频流、直播流）]]></title>
        <id>https://jorlken1.github.io/post/Vue-Easy-Player/</id>
        <link href="https://jorlken1.github.io/post/Vue-Easy-Player/">
        </link>
        <updated>2022-05-13T00:49:29.000Z</updated>
        <content type="html"><![CDATA[<p>由于之前用过vedio-player接入直播流遇到了不好用，支持的格式少，性能不稳定等问题，后发现easy-player可以完美兼容及用户体验良好，故将项目的直播流接入Easy-player，推荐大家使用它。</p>
<p>接下来分享关于easy-player的操作以及使用的方法。</p>
<h2 id="第一步打开终端用npm下载easy-player">第一步：打开终端，用npm下载Easy-player</h2>
<p><code>npm install easy-player</code></p>
<p>如遇到下载失败的问题可以去网上搜寻错误关键字，或使用 <strong>npm淘宝镜像</strong>，<strong>cnpm</strong>，<strong>yarn</strong>改善下载问题。</p>
<h2 id="第二步移动文件">第二步：移动文件</h2>
<p>在项目的依赖包 <code>node_modules</code> 里，找到 <code>easy-player</code> 文件夹</p>
<figure data-type="image" tabindex="1"><img src="https://jorlken1.github.io/post-images/1652408721487.png" alt="" loading="lazy"></figure>
<p>在 <code>easy-player</code>文件夹 下的 <code>dist</code> 文件夹 下的 <code>component</code>文件夹 中复制这三个文件</p>
<figure data-type="image" tabindex="2"><img src="https://jorlken1.github.io/post-images/1652408729314.png" alt="" loading="lazy"></figure>
<p>粘贴到与 <code>node_modules</code>文件夹 同级的 <code>public</code> 文件夹 中即可使用</p>
<h2 id="第三步引入文件">第三步：引入文件</h2>
<p>进入 <code>public</code> 文件夹 中的 <code>index.html</code> 文件 中，用 <em>script</em> 标签引入 <em>easy-player</em></p>
<pre><code>&lt;html lang=&quot;zh-cmn-Hans&quot;&gt;
  &lt;head&gt;
    ...
    &lt;script src=&quot;./easy-player-lib.min.js&quot;&gt;&lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;
      ...
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h2 id="第四步去vue文件中使用">第四步：去.vue文件中使用</h2>
<pre><code>&lt;template&gt;
    ...
      &lt;EasyPlayer
        :videoUrl=&quot;src&quot; // 你的视频文件
        aspect=&quot;19:9&quot;  // 你的视频长宽的比例
        live // 是否接受直播流
        autoplay // 是否自动播放
        stretch // 视频比例是否自适应
        style=&quot;width:100%;height:60px&quot; // 调节样式
        //更多配置项在后文补充
      &gt;&lt;/EasyPlayer&gt;
    ...
&lt;/template&gt;
&lt;script&gt;
...
import EasyPlayer from 'easy-player'
...
export default {
  ...
  components: {
    EasyPlayer
  }
  ...
}
&lt;/script&gt;
</code></pre>
<p>至此，easy-player就可以使用啦</p>
<p>ps:为了保证public文件夹的干净整洁，可以将需要的三个文件放在一个独立的文件夹下方便管理。</p>
<h2 id="补充可配置项">补充可配置项</h2>
<p><strong>属性(Property)</strong></p>
<ul>
<li><code>video-url</code> 视频流地址 String default ''</li>
<li><code>video-title</code> 视频右上角显示的标题 String default ''</li>
<li><code>poster</code> 视频封面图片 String default ''</li>
<li><code>autoplay</code> 自动播放 Boolean default true</li>
<li><code>loop</code> 是否循环播放 Boolean default false</li>
<li><code>live</code> 是否直播, 标识要不要显示进度条 Boolean default false</li>
<li><code>alt</code> 视频流地址没有指定情况下, 视频所在区域显示的文字, 相当于 html img 标签的 alt 属性 String default '无信号'</li>
<li><code>muted</code> 是否静音 Boolean default false</li>
<li><code>aspect</code> 视频显示区域的宽高比 String default '16:9'</li>
<li><code>loading</code> 指示加载状态, 支持 sync 修饰符</li>
<li><code>fluent</code> 流畅模式, Boolean default true</li>
<li><code>stretch</code> 是否拉伸, Boolean default false</li>
<li><code>timeout</code> m3u8 加载超时(秒) Number default 20</li>
<li><code>show-custom-button</code> 是否在工具栏显示自定义按钮(极速/流畅, 拉伸/标准), Boolean default true</li>
</ul>
<p><strong>方法(Medthod)</strong></p>
<ul>
<li><code>getCurrentTime</code> 获取当前播放时间进度, 同步返回播放时间进度数据</li>
<li><code>snap</code> 外部 API 方式获取快照, 快照获取成功后, 触发 snapOutside Event</li>
</ul>
<p><strong>事件(Event)</strong></p>
<ul>
<li><code>message</code> 触发通知消息, 参数: { type: '', message: ''}</li>
<li><code>ended</code> 播放结束, 参数: 无</li>
<li><code>timeupdate</code> 进度更新, 参数: 当前时间进度</li>
<li><code>pause</code> 暂停, 参数: 当前时间进度</li>
<li><code>play</code> 播放, 参数: 当前时间进度,</li>
<li><code>snapOutside</code> 外部快照回调, 参数: 快照 Base64 数据</li>
<li><code>snapInside</code> 内部快照回调, 由控制栏快照按钮触发, 参数: 快照 Base64 数据</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[第一篇文章]]></title>
        <id>https://jorlken1.github.io/post/di-yi-pian-wen-zhang/</id>
        <link href="https://jorlken1.github.io/post/di-yi-pian-wen-zhang/">
        </link>
        <updated>2022-05-12T01:58:53.000Z</updated>
        <content type="html"><![CDATA[<p>hello gridea ，成功完成个性化配置，开始编写。</p>
]]></content>
    </entry>
</feed>